@using ParadigmWatch.Models;
@using ParadigmWatch.Infrastructure
@model Watch

@{
    ViewData["Title"] = Model.Name;
}

<section id="ProductShow">
    <div class="ShowContainer">
        <div class="showTop">
            <p id="location">@Url.RouteUrl(ViewContext.RouteData.Values)</p>
        </div>
        <div class="showDown">
            <h1 class="title">@Model.Name</h1>
            <p class="price">@Model.Price $</p>
            <div class="detailsContainer">
                <p class="description">@Model.Description</p>
                <div class="navigationLinksShow">
                    <form id="@Model.Id" asp-action="AddToCart"
                          asp-controller="Cart" method="post">
                        <input type="hidden" name="ProductId" value="@Model.Id" />
                        <input type="hidden" name="returnUrl"
                               value="@ViewContext.HttpContext.Request.PathAndQuery()" />
                        <span class="">
                            <button type="submit"
                                    class="shop">
                                Add To Cart
                            </button>
                        </span>
                    </form>
                    <a href="#" class="primaryLink">Build your own</a>
                </div>
            </div>
        </div>
    </div>

    <div class="imageCenter">
        <img class="sliderImg" src="~/Images/@Model.WatchImagePath" alt="@Model.Name" />

    </div>

</section>

<section id="HighlightComponent">
    <div class="hlContainer">
        <h2 class="hlTitle">@Model.WatchParts[0].TextureMap.TextureName</h2>
        <p class="hlDesc">@Model.WatchParts[0].TextureMap.TextureDesc</p>
    </div>


</section>

<section id="components">
    @if (true)
    {
        List<string> textures = new List<string>();
        textures.Add(Model.WatchParts[0].TextureMap.TextureName);
        int counter = 0;
        @foreach (var item in Model.WatchParts)
        {

            string foundTexture = textures.Where(texture => texture.Equals(item.TextureMap.TextureName)).FirstOrDefault();
            if (foundTexture == null && counter < 4)
            {
                <div class="component">
                    <h3 class="compTitle">@item.TextureMap.TextureName</h3>
                    <p class="compDesc">@item.TextureMap.TextureDesc</p>
                </div>
                textures.Add(item.TextureMap.TextureName);
            }
            counter++;
        }
    }



</section>

<section id="recommendations">
    <h3>You may also like</h3>
    <div class="productsRec">

        @await Component.InvokeAsync("YouMayAlsoLike", Model.Name)

    </div>
</section>
<script type="text/javascript" src="~/js/ProductPage.js"></script>